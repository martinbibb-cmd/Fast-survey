(function(global){
  'use strict';
  var MM_TO_PT = 72 / 25.4;
  function strToUint8(str){
    var len = str.length;
    var out = new Uint8Array(len);
    for (var i = 0; i < len; i++){
      out[i] = str.charCodeAt(i) & 0xFF;
    }
    return out;
  }
  function merge(chunks){
    var total = 0;
    for (var i = 0; i < chunks.length; i++){
      total += chunks[i].length;
    }
    var out = new Uint8Array(total);
    var offset = 0;
    for (var j = 0; j < chunks.length; j++){
      out.set(chunks[j], offset);
      offset += chunks[j].length;
    }
    return out;
  }
  function escapePdf(text){
    return text.replace(/\\/g, '\\\\').replace(/\(/g, '\\(').replace(/\)/g, '\\)').replace(/\r/g, ' ').replace(/\n/g, '\\n');
  }
  function buildObject(id, body, stream){
    var header = id + ' 0 obj\n';
    var parts = [];
    parts.push(strToUint8(header));
    if (stream){
      var dict = body.replace('%%LENGTH%%', stream.length);
      parts.push(strToUint8(dict + '\nstream\n'));
      parts.push(stream);
      parts.push(strToUint8('\nendstream\nendobj\n'));
    } else {
      parts.push(strToUint8(body + '\nendobj\n'));
    }
    return merge(parts);
  }
  function jsPDF(){
    this.pageWidth = 210;
    this.pageHeight = 297;
    this.fontSize = 12;
    this.textRuns = [];
    this.images = [];
    this.lineHeight = 1.25;
  }
  jsPDF.prototype.setFontSize = function(size){
    this.fontSize = size;
  };
  jsPDF.prototype.text = function(text, x, y){
    var self = this;
    if (Array.isArray(text)){
      text.forEach(function(line, index){
        self.text(line, x, y + index * self.fontSize * self.lineHeight);
      });
      return;
    }
    var lines = String(text).split(/\r?\n/);
    for (var i = 0; i < lines.length; i++){
      this.textRuns.push({ text: lines[i], x: x, y: y + i * this.fontSize * this.lineHeight, size: this.fontSize });
    }
  };
  jsPDF.prototype.addImage = function(dataUrl, format, x, y, width, height, details){
    details = details || {};
    var base64 = dataUrl.split(',')[1];
    var binary = atob(base64);
    var bytes = new Uint8Array(binary.length);
    for (var i = 0; i < binary.length; i++){
      bytes[i] = binary.charCodeAt(i) & 0xFF;
    }
    this.images.push({ bytes: bytes, format: (format || 'JPEG').toUpperCase(), x: x, y: y, width: width, height: height, pixelWidth: details.pixelWidth || width, pixelHeight: details.pixelHeight || height });
  };
  jsPDF.prototype.addPage = function(){
    throw new Error('addPage not implemented in lightweight build');
  };
  jsPDF.prototype.output = function(type){
    var pdf = this._build();
    if (type === 'arraybuffer'){
      return pdf.buffer;
    }
    if (type === 'uint8array'){
      return pdf;
    }
    if (type === 'blob' || type === undefined){
      return new Blob([pdf], { type: 'application/pdf' });
    }
    if (type === 'datauristring'){
      var str = '';
      var bytes = pdf;
      for (var i = 0; i < bytes.length; i++){
        str += String.fromCharCode(bytes[i]);
      }
      return 'data:application/pdf;base64,' + btoa(str);
    }
    return pdf;
  };
  jsPDF.prototype.save = function(name){
    var blob = this.output('blob');
    var link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = name || 'document.pdf';
    document.body.appendChild(link);
    link.click();
    setTimeout(function(){
      URL.revokeObjectURL(link.href);
      document.body.removeChild(link);
    }, 100);
  };
  jsPDF.prototype._build = function(){
    var objects = [];
    var objectCount = 5 + this.images.length;
    var resources = '/Font << /F1 5 0 R >>';
    if (this.images.length){
      resources += ' /XObject <<';
      for (var i = 0; i < this.images.length; i++){
        resources += ' /Im' + (i + 1) + ' ' + (6 + i) + ' 0 R';
      }
      resources += ' >>';
    }
    resources = '<< ' + resources + ' /ProcSet [/PDF /Text /ImageB /ImageC /ImageI] >>';
    var contentLines = [];
    if (this.textRuns.length){
      contentLines.push('BT');
      for (var t = 0; t < this.textRuns.length; t++){
        var run = this.textRuns[t];
        var xPt = (run.x) * MM_TO_PT;
        var yPt = (this.pageHeight - run.y) * MM_TO_PT - run.size;
        contentLines.push('/F1 ' + run.size + ' Tf');
        contentLines.push('1 0 0 1 ' + xPt.toFixed(2) + ' ' + yPt.toFixed(2) + ' Tm');
        contentLines.push('(' + escapePdf(run.text) + ') Tj');
      }
      contentLines.push('ET');
    }
    for (var im = 0; im < this.images.length; im++){
      var img = this.images[im];
      var wPt = img.width * MM_TO_PT;
      var hPt = img.height * MM_TO_PT;
      var xImg = img.x * MM_TO_PT;
      var yImg = (this.pageHeight - img.y - img.height) * MM_TO_PT;
      contentLines.push('q');
      contentLines.push(wPt.toFixed(2) + ' 0 0 ' + hPt.toFixed(2) + ' ' + xImg.toFixed(2) + ' ' + yImg.toFixed(2) + ' cm');
      contentLines.push('/Im' + (im + 1) + ' Do');
      contentLines.push('Q');
    }
    var contentStream = strToUint8(contentLines.join('\n'));
    objects.push({ id: 1, body: '<< /Type /Catalog /Pages 2 0 R >>' });
    objects.push({ id: 2, body: '<< /Type /Pages /Count 1 /Kids [3 0 R] >>' });
    objects.push({ id: 3, body: '<< /Type /Page /Parent 2 0 R /MediaBox [0 0 ' + (this.pageWidth * MM_TO_PT).toFixed(2) + ' ' + (this.pageHeight * MM_TO_PT).toFixed(2) + '] /Resources ' + resources + ' /Contents 4 0 R >>' });
    objects.push({ id: 4, body: '<< /Length %%LENGTH%% >>', stream: contentStream });
    objects.push({ id: 5, body: '<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>' });
    for (var idx = 0; idx < this.images.length; idx++){
      var imgObj = this.images[idx];
      var dict = '<< /Type /XObject /Subtype /Image /Width ' + (imgObj.pixelWidth | 0) + ' /Height ' + (imgObj.pixelHeight | 0) + ' /ColorSpace /DeviceRGB /BitsPerComponent 8 /Filter /DCTDecode /Length %%LENGTH%% >>';
      objects.push({ id: 6 + idx, body: dict, stream: imgObj.bytes });
    }
    objects.sort(function(a, b){ return a.id - b.id; });
    var pdfParts = [strToUint8('%PDF-1.3\n')];
    var offsets = { 0: 0 };
    var current = pdfParts[0].length;
    for (var o = 0; o < objects.length; o++){
      offsets[objects[o].id] = current;
      var chunk = buildObject(objects[o].id, objects[o].body, objects[o].stream);
      pdfParts.push(chunk);
      current += chunk.length;
    }
    var xrefStart = current;
    var xref = 'xref\n0 ' + (objects.length + 1) + '\n0000000000 65535 f \n';
    for (var id = 1; id <= objects.length; id++){
      var offsetVal = offsets[id] || 0;
      xref += ('0000000000' + offsetVal).slice(-10) + ' 00000 n \n';
    }
    var trailer = 'trailer\n<< /Size ' + (objects.length + 1) + ' /Root 1 0 R >>\nstartxref\n' + xrefStart + '\n%%EOF';
    pdfParts.push(strToUint8(xref));
    pdfParts.push(strToUint8(trailer));
    return merge(pdfParts);
  };
  global.jspdf = { jsPDF: jsPDF };
  global.jsPDF = jsPDF;
})(typeof window !== 'undefined' ? window : this);
